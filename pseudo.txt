TPSO(distributionSystem, contingencyScenarios, customerDamageFunctions, loadData, sectionalizerCost, breakerCost)
    Initialize swarm with random positions and velocities
    Initialize global best solution and fitness
    
    for each iteration:
        for each particle in swarm:
            Calculate particle's fitness using calculateFitness
            Update particle's personal best position and fitness if current fitness is better
            Update global best position and fitness if current fitness is better than global best
            
            find new position and new velocity with updatePosition and updateVelocity
            
            Calculate distances from particle's position to reference angles
            Apply transformation function to distances
            
            Update particle's velocity
            Update particle's position
    
    return global best solution and fitness




function calculateECOSTForContingency(contingency, system):
    faultedSection = contingency.faultedSection
    repairTime = contingency.repairTime
    totalECOST = 0

    breakers = findBreakers(system)
    sectionalizers = findSectionalizers(system)

    firstBreaker = findFirstBreaker(faultedSection, breakers)

    if firstBreaker is None:
        for each loadPoint in loadData:
            totalECOST += calculateECOSTForLoadPoint(loadPoint, repairTime)
        return totalECOST

    firstSectionalizer = findFirstSectionalizer(faultedSection, sectionalizers, firstBreaker)

    if firstSectionalizer is None:
        deEnergizedLoadPoints = findDeEnergizedLoadPoints(firstBreaker + 1, system)
        for each loadPoint in deEnergizedLoadPoints:
            totalECOST += calculateECOSTForLoadPoint(loadPoint, repairTime)
    else:
        deEnergizedLoadPoints = findDeEnergizedLoadPoints(firstBreaker + 1, system)
        sectionalizerSwitchingTime = 5
        for each loadPoint in deEnergizedLoadPoints:
            totalECOST += calculateECOSTForLoadPoint(loadPoint, sectionalizerSwitchingTime)

        newDeEnergizedLoadPoints = findDeEnergizedLoadPoints(firstSectionalizer + 1, system)
        loopSwitchSwitchingTime = 5
        for each loadPoint in newDeEnergizedLoadPoints:
            totalECOST += calculateECOSTForLoadPoint(loadPoint, loopSwitchSwitchingTime)

        remainingFaultyZone = findDeEnergizedLoadPoints(faultedSection, system)
        for each loadPoint in remainingFaultyZone:
            totalECOST += calculateECOSTForLoadPoint(loadPoint, repairTime)

    return totalECOST



function calculateFitness(position, distributionSystem):
    decodedPosition = decodePosition(position)
    system = mapSystemToPosition(distributionSystem, decodedPosition)

    totalECOST = 0
    for each contingency in contingencyScenarios:
        totalECOST += calculateECOSTForContingency(contingency, system)

    investmentCost = sumInvestmentCosts(decodedPosition)

    return totalECOST + investmentCost



function calculateDistance(vector1, vector2):
    distances = []
    for i from 0 to length(vector1):
        angle1 = vector1[i]
        angle2 = vector2[i]
        distance = min(abs(angle1 - angle2), 2 * PI - abs(angle1 - angle2))
        distances.append(distance)
    return distances




function findFirstBreaker(faultedSection, breakers):
    for each breaker in breakers:
        if breaker < faultedSection:
            return breaker
    return None



function findFirstSectionalizer(faultedSection, sectionalizers, firstBreaker):
    for each sectionalizer in sectionalizers:
        if sectionalizer < faultedSection and sectionalizer > firstBreaker:
            return sectionalizer
    return None




function findDeEnergizedLoadPoints(startIndex, system):
    deEnergizedLoadPoints = []
    for i from startIndex to length(loadData):
        deEnergizedLoadPoints.append(loadData[i])
    return deEnergizedLoadPoints




function decodePosition(position):
    decodedPosition = []
    for each angle in position:
        if angle < PI / 3:
            decodedPosition.append(0)  # No switch
        else if angle < 2 * PI / 3:
            decodedPosition.append(1)  # Sectionalizer
        else:
            decodedPosition.append(2)  # Breaker
    return decodedPosition



function mapSystemToPosition(distributionSystem, decodedPosition):
    system = []
    for i from 0 to length(distributionSystem):
        element = distributionSystem[i]
        type = decodedPosition[i]
        switch = None
        if type == 1:
            switch = "sectionalizer"
        else if type == 2:
            switch = "breaker"
        system.append({"id": element.id, "type": switch})
    return system



    
function sumInvestmentCosts(decodedPosition):
    numSectionalizers = count(decodedPosition, 1)
    numBreakers = count(decodedPosition, 2)
    investmentCost = numSectionalizers * sectionalizerCost + numBreakers * breakerCost
    return investmentCost